---
title: Constantes
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

Uma constante Ruby é como uma variável, exceto que seu valor supostamente deve se manter constante enquanto o programa durar. O interpretador Ruby na verdade não força a constância de constantes, mas ele avisa caso um programa altere o valor de uma constante, como mostrado nesse exemplo trivial - **p054constwarn.rb**

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p054constwarn.rb
  A_CONST = 10
  A_CONST = 20
<% end -%>

Produz um aviso (warning):

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
  p054constwarn.rb:3: warning: already initialized constant A_CONST
  # aviso: a constante A_CONST já foi inicializada
<% end -%>

Do ponto de vista léxico, o nome de constantes se parece com o de variáveis locais, exceto pelo fato de começarem uma letra em maiúsculo. Por convenção, a maioria das constantes são escritas com todas as letras em maiúsculas e underscores são usados para separar palavras, DESSA_FORMA. Os nomes de módulo e de classes Ruby são também constantes, mas são convencionalmente escritos usando letras maiúsculas no início de cada palavra (o chamado camel case), AssimPorExemplo.

Perceba que constantes não existem até que um valor seja associado as mesmas.

Embora constantes não devam ser alteradas, você pode modificar o estado interno dos objetos que elas referenciam, como visto no exemplo **p055constalter.rb**:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p055constalter.rb
  A_CONST = "Doshi"
  B_CONST = A_CONST
  A_CONST[0] = "J" # altera a string referenciada pela constante
  puts A_CONST # mostra Joshi
  puts B_CONST # também mostra Joshi
<% end -%>

<div class='box'>
NO RAILS: Você pode encontrar exemplos desse tipo de operação (modificação) no código fonte do Rails, onde constantes aparecem prominentemente e os objetos que elas representam passam por mudanças com certa frequência.
</div>

Observe:
* Constantes definidas dento de uma classe ou módulo podem ser acessadas em qualquer lugar dentro da classe ou módulo
* Fora da classe ou módulo, elas podem ser acessadas usando o operador de escopo :: , prefixado por uma expressão que retorna o módulo ou classe associado (Classe::CONSTANTE)
* Constantes definidas fora de qualquer classe ou módulo podem ser acessadas normalmente ou usando o operador de escopo sem nenhum prefixo.
* Constantes não podem ser definidas em métodos.
* Constantes podem ser externamente adicionadas a classes e módulos existentes utilizando o nome da classe ou do módulo e o operador de escopo antes do nome da constante.

O programa **p056const.rb** mostra tudo isso:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  CONSTANTE_EXTERNA = 99

  class Constante
      def pega_constante
        CONSTANTE
      end
      CONSTANTE = CONSTANTE_EXTERNA + 1
  end

  puts Constante.new.pega_constante
  puts Constante::CONSTANTE
  puts ::CONSTANTE_EXTERNA
  puts Constante::NOVA_CONSTANTE = 123
<% end -%>

Outro exemplo elaborado sobre métodos de uma classe é o **p057mymethods2.rb**. Nesse exemplo nós também vemos como escrever um método de classe.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p057mymethods2.rb
  # variávais e métodos começam com letra minúscula
  $glob = 5 # variáveis globais começam com $
  class TestVar # nome de classe é constante, começa com maiúscula
   @@cla = 6 # variáveis de classe começam com @@
   CONST_VAL = 7 # estilo de constante, caixa alta, underscore
   def initialize(x) # construtor
    @inst = x # variáveis de instância começam com @
    @@cla += 1 # cada objeto compartilha @@cla
   end
   def self.cla # método de classe, getter
    @@cla
   end
   def self.cla=(y) # método de classe, setter, também TestVar.
    @@cla = y
   end
   def inst # método de instância, getter
    @inst
   end
   def inst=(i) # método de instância, setter
    @inst = i
   end
  end
  puts $glob
  test = TestVar.new(3) # chama construtor
  puts TestVar.cla # chma getter
  puts test.inspect # dá o ID do objeto e variáveis de instância
  TestVar.cla = 4 # chama setter
  test.inst=8 # chama setter
  puts TestVar.cla
  puts test.inst # chama getter
  other = TestVar.new(17)
  puts other.inspect
  puts TestVar.cla
<% end -%>

h2. Sumário

Listei todos os "pontos importantes":sumario-ruby8.html que você precisa se lembrar após ter completado os seguintes tópicos: Serialização de Objetos, Módulos/Mixins, Self e Constantes.

<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

