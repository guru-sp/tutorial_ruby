---
title:      "Duck Typing"
created_at: 2010-07-07 19:20:01.610313 -03:00
filter:
  - erb
  - textile
---
p(title). <%= h(@page.title) %>

Talvez você já tenha notado, que em Ruby não declaramos os tipos de variáveis ou métodos - tudo já é algum tipo de um objeto. Objetos em Ruby (ao contrário dos objetos em outras linguagens orientadas a objeto) podem ser individualmente modificados. Você sempre pode adicionar métodos em um objeto. Em Ruby, o comportamento ou a capacidade de um objeto, pode se diferenciar dos fornecidos pela sua classe.

<div class='box'>
 Em Ruby, nós confiamos menos no tipo (ou classe) de um objeto e mais nas suas capacidades. Por isso, Duck Typing (que por ser um termo técnico, não há uma tradução precisa), significa que um tipo de objeto é definido por aquilo que ele pode fazer, não pelo que ele é. Duck Typing refere-se a tendência de Ruby estar menos preocupado com a classe de um objeto e mais preocupado com quais os métodos que podem ser chamados e quais operações podem ser executadas sobre ele. Em Ruby, usaríamos respond_to? ou poderíamos, simplesmente passar um objeto para um método e saberíamos que uma exceção seria levantada, se formos utilizar de forma inadequada.
</div>

Se um objeto anda como um pato e fala como um pato, então o interpretador Ruby está feliz em tratá-lo como se fosse um pato.

Considere o seguinte exemplo.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # Verificar se o objeto defini o método to_str
  puts ('Uma string'.respond_to? :to_str) # => true
  puts (Exception.new.respond_to? :to_str) # => false
  puts (4.respond_to? :to_str) # => false
<% end -%>

O exemplo acima é o exemplo mais simples da filosofia Ruby de Duck Typing: se um objeto faz "quack" como um pato (ou age como uma string), basta ir em frente e tratá-lo como um pato (ou uma string).  Sempre que possível, você deve tratar objetos de acordo com os métodos que ele possui, ao invés, de definir as classes a partir do que eles herdam ou módulos que incluem.

Agora, considere as três seguintes classes - Pato, Ganso e PatoDonald.  Programa *p036duck.rb*

h2. Código

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  class Pato
    def quack
      'Quack!'
    end

    def nadar
      'nadando nadando nadando...'
    end
  end

  class Ganso
    def grasnar
      'Grasnando!'
    end

    def nadar
      'Splash splash splash...'
    end
  end

  class PatoDonald
    def quack
      play
    end

    def play
      'Quack! Sou o Pato Donald!'
    end
  end

  def faz_quack(pato)
    pato.quack
  end
  puts faz_quack(Pato.new)
  puts faz_quack(PatoDonald.new)

  def faz_nadar(duck)
    duck.nadar
  end
  puts faz_nadar(Pato.new)
  puts faz_nadar(Ganso.new)
<% end -%>

Se você consultar o código abaixo:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  def faz_quack(pato)
    pato.quack
  end
  puts faz_quack(Pato.new)
  puts faz_quack(PatoDonald.new)
<% end -%>

Um método que disse a um Pato para fazer quack funciona quando recebe um PatoDonald, graças ao Duck Typing. O mesmo pode ser observado no seguinte código:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  def faz_nadar(pato)
    pato.nadar
  end
  puts faz_nadar(Pato.new)
  puts faz_nadar(Ganso.new)
<% end -%>

Quando um método que diz para um Pato nadar recebe um Ganso, ele funciona.

<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

