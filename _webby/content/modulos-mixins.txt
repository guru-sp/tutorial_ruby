---
title: Módulos e Mixins
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

Módulos Ruby são similares a classes em relação ao fato de que também armazenam uma coleção de métodos, constantes e outras definições de módulos e classes. Módulos são definidos de forma similar as classes, mas a palavra-chave **module** é usada no lugar de **class**. Entretanto, diferente das classes, você não pode criar objetos baseados em módulos nem pode criar módulos que herdam desse módulo; ao invés disso, você especifica qual funcionalidade de um módulo específico você deseja adicionar a uma classe ou a um objeto específico. Módulos permanecem sozinhos; não há hierarquia de módulos ou herança. Módulos são um bom lugar para armazenar constantes em um local centralizado.

Módulos tem dois principais objetivos:

* Primeiro eles agem como namespace, permitindo que você defina métodos cujos nomes não irão colidir com aqueles definidos em outras partes de um programa. Os exemplos **p058mytrig.rb, p059mymoral.rb, p060usemodule.rb** mostram isso.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p058mytrig.rb
  module Trig
    PI = 3.1416
    # métodos de classe
    def Trig.sin(x)
      # ...
    end
    def Trig.cos(x)
      # ...
    end
  end

  # p059mymoral.rb
  module Moral
    VERY_BAD = 0
    BAD         = 1
    def Moral.sin(badness)
      # ...
    end
  end

  # p060usemodule.rb
  require 'p058mytrig'
  require 'p059mymoral'
  Trig.sin(Trig::PI/4)
  Moral.sin(Moral::VERY_BAD)
<% end -%>

* Em segundo lugar, permitem que você compartilhe funcionalidade entre classes - se uma classe "mistura" (mixes in) um módulo (isto é, o inclui), todos os métodos de instância do módulo se tornam disponíveis como se tivessem sido definidos na classe.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p061mixins.rb
  module D
    def initialize(nome)
      @nome =nome
    end
    def to_s
      @nome
    end
  end

  module Debug
    include D
    # Métodos que agem como perguntas
    # geralmente são nomeados com um ? no final
    def quem_sou_eu?
      "#{self.class.nome} (\##{self.object_id}): #{self.to_s}"
    end
  end

  class Phonograph
    # a declaração include apenas faz uma referência para o módulo nomeado
    # se esse módulo está em um arquivo separado, use require para adicioná-lo
    # antes de usar o include
    include Debug
    # ...
  end

  class EightTrack
    include Debug
    # ...
  end

  ph = Phonograph.new("West End Blues")
  et = EightTrack.new("Real Pillow")
  puts ph.quem_sou_eu?
  puts et.quem_sou_eu?
<% end -%>

<div class='box'>
Observe como usamos require ou load. require e load aceitam strings como argumentos.

require 'motorcycle' ou load 'motorcycle.rb'

include recebe o nome de um módulo, na forma de uma constante, como em include Coisa.

O método include aceita qualquer número de módulos para serem inclusos:

include Enumerable, Comparable

Embora toda classe seja um módulo, o método include não permite que uma classe seja incluída em outra classe.
</div>

Mais alguns exemplos:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  #  p062stuff.rb
  #  Um módulo pode conter constantes, métodos e classes.
  #  Mas não pode conter instâncias

  module Coisa
    C = 10
    def Coisa.m(x)  # prefixe com o nome do módulo para um método de classe
      C*x
    end
    def p(x)        # um método de instância, um mixin para outras classes
      C + x
    end
    class T
      @t = 2
    end
  end
  puts Coisa::C     # namespace Coisa
  puts Coisa.m(3)   # como um método de classe
  x = Coisa::T.new
  # se você tentar o seguinte terá um erro de constante não inicializada
  # puts C

  #------------

  # p063stuffusage.rb
  require 'p062stuff'     # carrega o módulo Coisa do arquivo p062stuff.rb
                      # $: é uma variável de sistema - contém o caminho para carregamento de arquivos

  class D
    include Coisa     # se refere ao módulo carregado
    puts Coisa.m(4)
  end

  d = D.new
  puts d.p(5)         # método p do módulo Coisa
  puts $:             # array de diretórios para procurar carregamentos
  $: << "c:/"         # adicione um diretório ao loadpath
  puts $:
  puts Coisa.m(5)     # método de classe Coisa não chamado pelo objeto D
<% end -%>

<div class='box'>
Lembre-se que você pode incluir mais de um módulo em uma classe. Porém, uma classe não pode herdar de mais de uma classe.
Nomes de classe geralmente são substantivos, enquanto nomes de módulos costumam ser adjetivos.
</div>

<div class='box'>
NO RAILS: O Código fonte do Rails usa bastante módulos, em particular a técnica de reabrir o corpo de definição tanto de módulos quanto de classes.
</div>

<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

