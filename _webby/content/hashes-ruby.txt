---
title:      Hashes (dicionários)
created_at: 2010-03-03 18:40:01.610313 -03:00
filter:
  - erb
  - textile
---
p(title). <%= h(@page.title) %>

Hashes (também conhecidos como arrays associativos, mapas ou dicionários) são similares aos arrays a medida que são coleções indexadas de referências a objetos. No entanto, enquanto o o array é indexado por inteiros (semelhante a um índice remissivo), o hash pode ser indexado com objetos de qualquer tipo: strings, expressões regulares e assim por diante. Quando você armazena um valor em um hash, você na verdade fornece dois objetos - o índice (normalmente chamado de chave) e o valor desse índice. É possível recuperar os valores utilizando o índice do hash. Os valores do hash, assim como os índices, podem ser objetos de qualquer tipo.

O exemplo **040myhash.rb** abaixo cria um hash com literais (strings): uma lista de pares chave => valor entre

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
# p040myhash.rb
h = {'cachorro' => 'canino', 'gato' => 'felino',
    'burro' => 'asinino', 12 => 'dodezino'}
puts h.length  # 4
puts h['cachorro']  # 'canino'
puts h
puts h[12]
<% end %>

A saída do código acima é:

<% coderay(:lang => "text", :line_numbers => "inline") do -%>
>ruby p040myhash.rb
4
canino
{"cachorro"=>"canino", "gato"=>"felino",
 "burro"=>"asinino", 12=>"dodezino"}
dodezino
>Exit code: 0
<% end %>

<div class='box'>
Caso o programa apresentado no exemplo  seja executado no Ruby 1.8 a saída será um pouco diferente. Em todos exemplos estamos utilizando o Ruby 1.9, no qual o hash é apresentado de forma ordenada e igual a sua declaração. Já no Ruby 1.8 a ordenação do hash é diferente da declarada
</div>

Comparados com arrays, os hashes têm uma vantagem significativa: eles podem usar qualquer objeto como índice.

Hashes têm um valor padrão. Tal valor é retornado após uma tentativa de acesso a uma chave não existente. Por padrão este valor é **nil**.

A classe *Hash* tem muitos métodos e você pode consultá-los "aqui":http://railsapi.com/doc/ruby-v1.9/classes/Hash.html (em inglês).

h2. Usando Símbolos como chaves do Hash

Ao invés, de utilizar uma string como chave, de preferência pelo uso de um símbolo. Veja o exemplo a seguir no programa *p041symbolhash.rb*.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
# p041symbolhash.rb
pessoa = Hash.new
pessoa[:apelido] = 'GuruIndiano'
pessoa[:idioma] = 'Marata'
pessoa[:sobrenome] = 'Talim'
puts pessoa[:sobrenome] # Talim
<% end %>

Outro exemplo *p0411symbolhash.rb*.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
# p0411symbolhash.rb
h = {:apelido => 'GuruIndiano', :idioma => 'Marata', :sobrenome => 'Talim'}
puts h
<% end %>

A saída do exemplo acima é:

<% coderay(:lang => "text", :line_numbers => "inline") do -%>
{:apelido=>"GuruIndiano", :idioma=>"Marata", :sobrenome=>"Talim"}
<% end %>

Outra maneira de fazer a mesma coisa é mostrada no programa *p0412symbolhash.rb*.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
# p0412symbolhash.rb
h = {apelido: 'GuruIndiano', idioma: 'Marata', sobrenome: 'Talim'}
puts h
<% end %>

A saída é:

<% coderay(:lang => "text", :line_numbers => "inline") do -%>
{:apelido=>"GuruIndiano", :idioma=>"Marata", :sobrenome=>"Talim"}
<% end %>

Ou seja, exatamente o mesmo que ocorreu na execução do programa **p0411symbolhash.rb**.

<div class='box'>
O último exemplo (**p0412symbolhash.rb**) não funcionará no Ruby 1.8. Ele utiliza uma sintaxe nova para declarar hashes introduzida no Ruby 1.9.
</div>



<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

