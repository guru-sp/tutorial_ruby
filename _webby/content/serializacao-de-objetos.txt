---
title:      Serialização de objetos
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

A linguagem Java possui a habilidade de serializar objetos, permitindo que você os armazene em algum lugar e depois os reconstitua quando necessário. O Ruby chama esse tipo de serialização de marshaling (empacotamento).

Escreveremos uma classe básica (**p051gamecharacters.rb**) apenas para testar o marshaling.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p051gamecharacters.rb
  class PersonagemDoJogo
    def initialize(poder, tipo, armas)
      @poder = poder
      @tipo = tipo
      @armas = armas
    end
    attr_reader :poder, :tipo, :armas
  end
<% end -%>

O programa **p052dumpgc.rb** cria um objeto da classe acima e então usa **Marshal.dump** para salvar a versão serializada dele no disco.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p052dumpgc.rb
  require 'p051gamecharacters'
  gc =  PersonagemDoJogo.new(120, 'Mago', [magias, 'invisibilidade'])
  puts gc.poder.to_s + ' ' + gc.tipo + ' '
  gc.armas.each do |w|
    puts w + ' '
  end

  File.open('jogo', 'w+') do |f|
    Marshal.dump(gc, f)
  end
<% end -%>

O programa **p053loadgc.rb** usa **Marshal.load** para lê-lo.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p053loadgc.rb
  require 'p051gamecharacters'
  File.open('joho') do |f|
    @gc = Marshal.load(f)
  end

  puts @gc.poder.to_s + ' ' + @gc.tipo + ' '
  @gc.armas.each do |w|
    puts w + ' '
  end
<% end -%>

**Marshal** apenas serializa estruturas de dados. Ele não pode serializar código Ruby (como objetos do tipo Proc), ou recursos alocados por outros processos (como tratadores de arquivo ou conexões com bancos de dados). **Marshal** apenas lhe dará um erro quando tentar serializar um arquivo.
<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

