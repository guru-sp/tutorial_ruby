---
title:      Açúcares sintáticos do Ruby
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

Programadores utilizam o termo açúcares sintáticos para se referir a regras especiais, que permitem que você escreva seu código de uma maneira que não correspondem as regras normais, mais que seja mais fácil de lembrar como fazer e fica melhor.

Vamos dizer que queremos definir o nome de um cachorro. Como ponto de partida, o nome pode ser definido junto com tudo, mais em tempo de criação do objeto, como no exemplo abaixo.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  class NewDog
    def initialize(breed, name)
      @breed = breed
      @name = name
    end
    attr_reader :breed, :name   # Apenas para leitura
  end
  nd = NewDog.new('Doberman', 'Benzy')
  puts nd.name
<% end -%>

Vamos reescrever o método set_name, que nos permite definir ou redefinir o nome de um cachorro existente. Também vamos rescrever o método initialize para que ele não espere um nome:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  class NewDog
    def initialize(breed)
      @breed = breed
    end
    attr_reader :breed, :name   # Apenas para leitura
    # método setter
    def set_name(nm)
      @name = nm
    end
  end
  nd = NewDog.new('Doberman')
  nd.set_name('Benzy')
  puts nd.name
<% end -%>


Ruby permite que você defina métodos que terminam com um sinal de igual (=). Vamos substituir set_name com um método chamado name=

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  def name=(nm)
    @name = nm
  end
<% end -%>


name= faz exatamente o que set_name faz e apesar do nome do método um pouco estranho, você pode chamá-lo como qualquer outro método:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  nd.name=('Benzy')
<% end -%>


Exemplo - p050newdog.rb

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  class NewDog
    def initialize(breed)
      @breed = breed
    end
    attr_reader :breed, :name # Apenas para leitura

    # método setter
    def name=(nm)
      @name = nm
    end
  end

  nd = NewDog.new('Doberman')
  #nd.name=('Benzy')
  nd.name = 'Benzy'
  puts nd.name
<% end -%>


O sinal de igual lhe dá algo que você conhece como "atribui um valor a algo", assim você sabe que esta lidando com um método setter. Ele ainda parece estranho, mais Ruby cuida de tudo.

Ruby lhe da um pouco de açucares sintático para chamar métodos setter.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  nd.name=('Benzy')
<% end -%>


você tem permissão para fazer isso:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  nd.name = 'Benzy'
<% end -%>

Quando o interpretador vê a mensagem "name" seguido de "=", ele automaticamente ignora os espaços antes do sinal de igual e lê a mensagem como única, "name=" - Uma chamada para o método cujo nome é name=, o que nós definimos. Quanto ao lado direito: os parênteses são opcionais para métodos com argumentos simples, sendo assim, você pode colocar apenas 'Benzy' lá e ele vai ser pego como argumento para o método name=.

<div class='box'>
NO RAILS: Chamadas de métodos usando sinal de igual são comuns em aplicações Rails.
</div>

<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >", page_url) %></div>

