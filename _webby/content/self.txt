---
title:  Self
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

Em cada ponto em que seu programa está rodando, há um único self  - o objeto atual ou padrão acessível para você em seu programa. Você pode dizer qual objeto self representa seguindo um pequeno conjunto de regras.

h2. Contexto de nível superior

O contexto de nível superior é aquele que ocorre antes de você entrar em qualquer outro contexto, como uma definição de classe. Então o termo nível superior se refere ao código escrito externamente a uma classe ou módulo. Se você abrir um novo arquivo de texto e digitar:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  x = 1
<% end -%>

Você criou uma variável local de nível superior. Se você digitar:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  def m
  end
<% end -%>

Você terá criado um método de nível superior - um método de instância de Object (embora self não seja um Object). Métodos de nível superior são sempre privados. O Ruby lhe provê um self inicial no nível mais alto. Se digitar:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  puts self
<% end -%>

Ele mostrará main (principal) - um termo especial que o objeto self usa para referir-se a si mesmo. A classe do objeto main é Object.

h2. Self dentro de definições de classes e módulos

Em uma definição de classe ou módulo, self é o objeto da classe ou do módulo.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p063xself1.rb
  class S
    puts 'Acabei de começar a classe S'
    puts self
    module M
      puts 'Módulo aninhado S::M'
      puts self
    end
    puts 'De volta ao nível externo de S'
    puts self
  end
<% end -%>


A saída é:

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
  >ruby p063xself1.rb
  Acabei de começar a classe S
  S
  Módulo aninhado S::M
  S::M
  De volta ao nível externo de S
  S
  >Exit code: 0
<% end -%>


h2. Self na definição de métodos de instância

Quando a definição de um método é executada, o máximo que você pode dizer é que self dentro deste método será algum objeto futuro que tem acesso ao mesmo.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p063xself2.rb
  class S
    def m
      puts 'Classe S método m:'
      puts self
    end
  end
  s = S.new
  s.m
<% end -%>


A saída será:

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
  >ruby p063xself2.rb
  Classe S método m:
  #<S:0x2835908>
  >Exit code: 0
<% end -%>


A saída #<S:0x2835908> é o jeito do Ruby de dizer "uma instância de S".


h2. Self em um método singleton e em definições de métodos de classe

Métodos singleton - aqueles que estão associados a um objeto e que podem ser chamados apenas por esse objeto. Quando um método singleton é executado, self é o objeto que é o dono do método, como mostrado abaixo:


<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p063xself3.rb
  obj = Object.new
  def obj.show
    print 'Sou um objeto: '
    puts "aqui self está dentro de um método singleton que me pertence:"
    puts self
  end
  obj.show
  print 'E inspecionando o objeto por fora, '
  puts "para ter certeza que é o mesmo objeto:"
  puts obj
<% end -%>


A saída do exemplo acima é:

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
  >ruby p063xself3.rb
  Sou um objeto: aqui self está dentro de um método singleton que me pertence:
  #<Object:0x2835688>
  E inspecionando o objeto por fora, para ter certeza que é o mesmo objeto:
  #<Object:0x2835688>
  >Exit code: 0
<% end -%>


Métodos de classe são definidos como métodos singleton para objetos do tipo classe. Veja o seguinte programa:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p063xself4.rb
  class S
    def S.x
      puts "Método de classe da classe S"
      puts self
    end
  end
  S.x
<% end -%>

A saída é:

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
  >ruby p063xself4.rb
  Método de classe da classe S
  S
  >Exit code: 0
<% end -%>

self dentro de um método singleton (um método de classe, nesse caso) é o objeto que possui o método singleton.
<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

