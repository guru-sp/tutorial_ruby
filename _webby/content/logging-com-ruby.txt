---
title:      Logging com Ruby
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

A classe **Logger** da biblioteca padrão do Ruby ajuda a escrever mensagens de log para um arquivo ou para um stream de dados. Ela suporta rolagem dos arquivos de log por tempo ou baseada em tamanho. Às mensagens podem ser associados níveis de gravidade e apenas as mensagens em um determinado nivel ou acima do nível atual do logger serão armazenadas, isto é, "logadas".

Quando você escreve um código, você simplesmente assume que todas as mensagens serão logadas. Em tempo de execução, você pode obter um log mais ou menos verboso mudando o nível do log. Uma aplicação em produção geralmente tem um nível de log Logger:INFO ou Logger:WARN. Do menos ao mais severo, os métodos são **Logger.debug**, **Logger.info**, **Logger.warn**, **Logger.error** e **Logger.fatal**.

O nível de log DEBUG é útil para diagnosticar uma tarefa passo a passo. O nível ERROR é geralmente usado quando se lida com o tratamento de exceções: se o programa não consegue resolver um problema, ele loga a exceção ao invés de parar sua execução e esperar que um administrador cuide do problema. O nível FATAL deve apenas ser usado quando um programa não pode se recuperar de algum problema, e está prestes a travar ou finalizar.

Se seu log está sendo armazenado em um arquivo, você pode ter o **Logger** rotacionado ou substituído quando ele se torna muito grande, ou uma vez que uma certa quantidade de tempo passou:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  require 'logger'
  # Mantenha os dados apenas para o mês atual
  Logger.new('este_mes_.log', 'monthly')
  # Mantenha os dados de hoje e para os proximos 20 dias
  Logger.new('application.log', 20, 'daily')
  # Reinicia o logger assim que o arquivo completar 100 megabytes
  Logger.new('application.log', 0, 100 * 1024 * 1024)
<% end -%>

O código abaixo, usa o logger da aplicação para imprimir uma mensagem de debugging e, em um nível mais alto de severidade, como parte do código de tratamento de erro.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  #logex.rb
  require 'logger'
  $LOG = Logger.new('log_file.log', 'monthly')
  def divide(numerador, denominador)
    $LOG.debug("Numerator: #{numerador}, denominador #{denominador}")
    begin
      result = numerador / denominador
    rescue Exception => e
      $LOG.error "Erro na divisão!: #{e}"
      resultado = nil
    end
    return resultado
  end
  divide(10, 2)
<% end -%>

O conteúdo do arquivo log_file.log é:

<% coderay(:lang => "text", :line_numbers => "inline") do -%>
  # Logfile created on Tue Mar 18 17:09:29 +0530 2008 by /
  D, [2008-03-18T17:09:29.216000 #2020] DEBUG -- : Numerador: 10, denominador 2
<% end -%>


Agora tente chamar o método assim:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  divide(10, 0)
<% end -%>

O conteúdo do arquivo log_file.log é:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # Logfile created on Tue Mar 18 17:09:29 +0530 2008 by /
  D, [2008-03-18T17:09:29.216000 #2020] DEBUG -- : Numerador: 10, denominador 2
  D, [2008-03-18T17:13:50.044000 #2820] DEBUG -- : Numerador: 10, denominador 0
  E, [2008-03-18T17:13:50.044000 #2820] ERROR -- : Erro na divisião!: divided by 0
<% end -%>

Para alterar o nível do log, simplesmente associe a constante apropriada a **level**:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  $LOG.level = Logger::ERROR
<% end -%>


Agora nosso logger ignorará todas as mensagens de log exceto as com nível de severidade ERROR ou FATAL. O conteúdo do arquivo log_file.log é:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  E, [2008-03-18T17:15:59.919000 #2624] ERROR -- : Erro na divisão!: divided by 0
<% end -%>

<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

