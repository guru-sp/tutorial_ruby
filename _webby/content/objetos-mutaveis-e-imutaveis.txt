---
title:      Objetos mutáveis e imutáveis
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

Objetos mutáveis são objetos cujo estado pode mudar. Objetos imutáveis são objetos cujo estado nunca se altera após sua criação.

Objetos imutáveis têm muitas propriedades desejáveis:

* Objetos imutáveis são seguros em relação a threads (__thread-safe__). Threads não podem corromper aquilo que não podem alterar.
* Objetos imutáveis tornam mais simples implementar encapsulamento. Se parte do estado de um objeto é armazenado em um objeto imutável, então os métodos assessores podem retornar esse objeto para chamadores externos sem se preocupar se estes chamadores podem mudar o estado do objeto.
* Objetos imutáveis são bons para se usar como chaves hash, visto que seu código hash não pode ser alterado.


No Ruby, a mutabilidade é uma propriedade de uma instância, não de uma classe completa. Qualquer instância pode se tornar imutável chamando o método **freeze** (congelar).

h2. Congelando Objetos

O método **freeze** na classe **Objetct** previne você de alterar um objeto, efetivamente transformando um objeto em uma constante. Após congelarmos um objeto, uma tentativa de modificá-lo resulta em um erro **RuntimeError**. O programa seguinte **p050xfreeze.rb** ilustra isso:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  str = 'Uma string simples. '
  str.freeze
  begin
    str << 'Uma tentativa de se modificar.'
  rescue => err
    puts "#{err.class} #{err}"
  end
  # A saída é - TypeError can't modify frozen string
<% end -%>


Entretanto, **freeze** opera na referência de um objeto, não em uma variável. Isso significa que qualquer operação resultando em um novo objeto funcionará. Isso pode ser verificado pelo seguinte exemplo:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  str = 'String original - '
  str.freeze
  str += 'anexo'
  puts str
  # A Saída é - String original - anexo
<% end -%>

A expressão str += 'anexo' é avaliada para um novo objeto, que é então associado a str. O objeto não é alterado, mas a variável str agora se refere a um novo objeto.

h2. frozen? (congelado?)

O método **frozen?** lhe diz se um objeto está congelado ou não. Vamos ver um exemplo:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  a = b = 'String Original'
  b.freeze
  puts a.frozen? # true
  puts b.frozen? # true
  a = 'Nova String'
  puts a
  puts b
  puts a.frozen? # false
  puts b.frozen? # true
<% end -%>

Vamos entender o que estamos fazendo aqui - a e b são duas variáveis que apontam para um objeto do tipo string - __String Original__.
Nós então congelamos o objeto __String Original__. Portanto, tanto a quanto b agora apontam para o objeto congelado __String Original__. Isto é verificado pelas declarações puts a.frozen? e puts b.frozen?. Em seguida, criamos um novo objeto string __Nova String__ e fazemos a variável a apontar para esse novo objeto. A variável b ainda aponta para o objeto congelado e a não mais. Isto é verificado pelas duas últimas declarações do programa.

**Uso**:
O Ruby às vezes copia objetos e congela as cópias. Quando você usa uma string como chave hash, o Ruby na verdade copia a string, congela a cópia e usa a cópia como chave hash: desse modo, se a string original se alterar mais tarde, a chave hash não é afetada.

As operações internas de arquivos do Ruby trabalham com uma cópia congelada do nome do arquivo ao invés de usar o nome do arquivo diretamente. Se outra thread altera o nome original do arquivo no meio de uma operação que deveria ser atômica, não há problema: o Ruby não estava usando o nome do arquivo original. Você pode adotar esse padrão copia-e-congela em código com suporte multi-thread para prevenir que uma estrutura de dados com que você esteja trabalhando seja alterada por outra thread.

Outro uso comum no nível do programador dessa funcionalidade é congelar uma classe para prevenir modificações futuras a mesma.

**Nota**: Sempre que um objeto no Ruby não tem referência a ele, então o objeto será marcado para remoção e o coletor de lixo irá remover esse objeto baseado em seu algoritmo. Não há como acessar um objeto sem referência.


h2. Sumário

Listei todos os "pontos importantes":sumario-ruby7.html para você se lembrar após ter completado os seguintes tópicos: "Duck Typing":duck-typing.html, "Açúcares sintáticos":acucares-sintaticos-do-ruby.html e Objetos Mutáveis e Imutáveis.

<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

