---
title: "Classes abertas em Ruby"
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

<div class='box'>
No Ruby as classes nunca são fechadas: você pode sempre adicionar métodos a uma classe existente. Isso se aplica para classes que você escreve assim como para as classes padrões que vem com a linguagem. Tudo o que você tem que fazer é abrir a definição de uma classe existente e então o conteúdo será adicionado a mesma.
</div>

Veja o programa **p031motorcycletest.rb** do último tópico, e adicione o método mostraAttr

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  require 'p030motorcycle'
  m = MotoCicleta.new('Yamaha', 'vermelha')
  m.ligaMotor

  class MotoCicleta
    def mostraAttr
      puts 'A cor da Motocicleta é ' + @cor
      puts 'O fabricante  da Motocicleta é ' + @fabricante
    end
  end
  m.mostraAttr
  m.ligaMotor
  puts self.class
  puts self
<% end -%>

Perceba que self.class se refere a **Object** e self se refere a um objeto chamado main da classe **Object**.

Mais um exemplo é o programa - **p031xdognext.rb**

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  require 'p029dog'
  # define a classe Cachorro
  class Cachorro
    def late_alto
      puts 'AU! AU!'
    end
  end
  # cria um objeto
  d = Cachorro.new('Labrador', 'Benzy')
  d.late
  d.late_alto
  d.display
<% end -%>

Aqui está outro exemplo de se adicionar um método para a classe **String**. O programa **p032mystring.rb** ilustra o mesmo. Veja que o método que adicionamos não faz nada de novo, apenas chama o método **size**. Em um cenário real você adicionaria uma funcionalidade nova a String.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  class String
    def escreve_tamanho
      self.size
    end
  end
  escritor_de_tamanho = "Conte-me meu tamanho!"
  puts escritor_de_tamanho.escreve_tamanho
<% end -%>

(Você pode conferir a saída para os programas acima por conta própria).

<div class='box'>
Se você está escrevendo um novo método que conceitualmente pertence a classe original, você pode reabrir a classe e adicionar seu método a definição da mesma. Você deve apenas fazer isso se seu método tem utilidade genérica e você tem certeza que ele não entrará em conflito com um outro método definido por uma biblioteca que você pode incluir no futuro. Se o seu método não tem utilidade genérica, ou você não quer correr o risco de modificar uma classe após sua criação, crie uma subclasse da classe original. A subclasse pode sobrescrever seus métodos pais, ou adicionar novos. Isso é mais seguro porque a classe original e, qualquer código que dependa dela, não serão afetados.
</div>

<%- page_title, page_url = next_page %>
<div class="pagination"><%= link_to(page_title + " >" , page_url) %></div>

